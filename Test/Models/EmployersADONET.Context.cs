//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SRSEntities : DbContext
    {
        public SRSEntities()
            : base("name=SRSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Budjet> Budjet { get; set; }
        public virtual DbSet<BuyStock> BuyStock { get; set; }
        public virtual DbSet<Employers> Employers { get; set; }
        public virtual DbSet<Finished_Production> Finished_Production { get; set; }
        public virtual DbSet<Ingredients> Ingredients { get; set; }
        public virtual DbSet<Manufacture> Manufacture { get; set; }
        public virtual DbSet<Measurement_Unit> Measurement_Unit { get; set; }
        public virtual DbSet<Ranks> Ranks { get; set; }
        public virtual DbSet<Sales_of_Prod> Sales_of_Prod { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Payment_Logs> Payment_Logs { get; set; }
        public virtual DbSet<Credit_Info> Credit_Info { get; set; }
        public virtual DbSet<Credit_Repayment> Credit_Repayment { get; set; }
    
        public virtual ObjectResult<Budjet> SP_Select_Budjet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Budjet>("SP_Select_Budjet");
        }
    
        public virtual ObjectResult<Budjet> SP_Select_Budjet(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Budjet>("SP_Select_Budjet", mergeOption);
        }
    
        public virtual int SP_Update_Budjet(Nullable<int> iD_Budj, Nullable<double> budj_Sum, Nullable<double> sale_Markup, Nullable<double> emp_Bonus)
        {
            var iD_BudjParameter = iD_Budj.HasValue ?
                new ObjectParameter("ID_Budj", iD_Budj) :
                new ObjectParameter("ID_Budj", typeof(int));
    
            var budj_SumParameter = budj_Sum.HasValue ?
                new ObjectParameter("Budj_Sum", budj_Sum) :
                new ObjectParameter("Budj_Sum", typeof(double));
    
            var sale_MarkupParameter = sale_Markup.HasValue ?
                new ObjectParameter("Sale_Markup", sale_Markup) :
                new ObjectParameter("Sale_Markup", typeof(double));
    
            var emp_BonusParameter = emp_Bonus.HasValue ?
                new ObjectParameter("Emp_Bonus", emp_Bonus) :
                new ObjectParameter("Emp_Bonus", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Budjet", iD_BudjParameter, budj_SumParameter, sale_MarkupParameter, emp_BonusParameter);
        }
    
        public virtual int SP_Delete_Employers(Nullable<int> iD_Employers)
        {
            var iD_EmployersParameter = iD_Employers.HasValue ?
                new ObjectParameter("ID_Employers", iD_Employers) :
                new ObjectParameter("ID_Employers", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Employers", iD_EmployersParameter);
        }
    
        public virtual int SP_Delete_Ingredients(Nullable<int> iD_Ingredient)
        {
            var iD_IngredientParameter = iD_Ingredient.HasValue ?
                new ObjectParameter("ID_Ingredient", iD_Ingredient) :
                new ObjectParameter("ID_Ingredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Ingredients", iD_IngredientParameter);
        }
    
        public virtual int SP_Delete_MeasurementUnit(Nullable<byte> iD_MerUn)
        {
            var iD_MerUnParameter = iD_MerUn.HasValue ?
                new ObjectParameter("ID_MerUn", iD_MerUn) :
                new ObjectParameter("ID_MerUn", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_MeasurementUnit", iD_MerUnParameter);
        }
    
        public virtual int SP_Delete_Production(Nullable<int> iD_FinPr)
        {
            var iD_FinPrParameter = iD_FinPr.HasValue ?
                new ObjectParameter("ID_FinPr", iD_FinPr) :
                new ObjectParameter("ID_FinPr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Production", iD_FinPrParameter);
        }
    
        public virtual int SP_Delete_Ranks(Nullable<int> iD_Rank)
        {
            var iD_RankParameter = iD_Rank.HasValue ?
                new ObjectParameter("ID_Rank", iD_Rank) :
                new ObjectParameter("ID_Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Ranks", iD_RankParameter);
        }
    
        public virtual int SP_Delete_Stock(Nullable<int> iD_Stock)
        {
            var iD_StockParameter = iD_Stock.HasValue ?
                new ObjectParameter("ID_Stock", iD_Stock) :
                new ObjectParameter("ID_Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Stock", iD_StockParameter);
        }
    
        public virtual int SP_Insert_Employers(string name_of_Emp, Nullable<byte> fK_Rank, Nullable<double> payment, string adress, string phone_Number)
        {
            var name_of_EmpParameter = name_of_Emp != null ?
                new ObjectParameter("Name_of_Emp", name_of_Emp) :
                new ObjectParameter("Name_of_Emp", typeof(string));
    
            var fK_RankParameter = fK_Rank.HasValue ?
                new ObjectParameter("FK_Rank", fK_Rank) :
                new ObjectParameter("FK_Rank", typeof(byte));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(double));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var phone_NumberParameter = phone_Number != null ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Employers", name_of_EmpParameter, fK_RankParameter, paymentParameter, adressParameter, phone_NumberParameter);
        }
    
        public virtual int SP_Insert_Ingredients(Nullable<int> fK_Production, Nullable<int> fK_Stock, Nullable<double> total_Amount)
        {
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var fK_StockParameter = fK_Stock.HasValue ?
                new ObjectParameter("FK_Stock", fK_Stock) :
                new ObjectParameter("FK_Stock", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Ingredients", fK_ProductionParameter, fK_StockParameter, total_AmountParameter);
        }
    
        public virtual int SP_Insert_MeasurementUnit(string name_MerUn)
        {
            var name_MerUnParameter = name_MerUn != null ?
                new ObjectParameter("Name_MerUn", name_MerUn) :
                new ObjectParameter("Name_MerUn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_MeasurementUnit", name_MerUnParameter);
        }
    
        public virtual int SP_Insert_Production(string name_FinPr, Nullable<byte> fK_Measurement_Unit, Nullable<double> sum, Nullable<double> total_Amount)
        {
            var name_FinPrParameter = name_FinPr != null ?
                new ObjectParameter("Name_FinPr", name_FinPr) :
                new ObjectParameter("Name_FinPr", typeof(string));
    
            var fK_Measurement_UnitParameter = fK_Measurement_Unit.HasValue ?
                new ObjectParameter("FK_Measurement_Unit", fK_Measurement_Unit) :
                new ObjectParameter("FK_Measurement_Unit", typeof(byte));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Production", name_FinPrParameter, fK_Measurement_UnitParameter, sumParameter, total_AmountParameter);
        }
    
        public virtual int SP_Insert_Ranks(string rank_name)
        {
            var rank_nameParameter = rank_name != null ?
                new ObjectParameter("Rank_name", rank_name) :
                new ObjectParameter("Rank_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Ranks", rank_nameParameter);
        }
    
        public virtual int SP_Insert_Stock(string name_of_Stock, Nullable<byte> fK_Measurement_Unit, Nullable<double> sum, Nullable<double> total_Amount)
        {
            var name_of_StockParameter = name_of_Stock != null ?
                new ObjectParameter("Name_of_Stock", name_of_Stock) :
                new ObjectParameter("Name_of_Stock", typeof(string));
    
            var fK_Measurement_UnitParameter = fK_Measurement_Unit.HasValue ?
                new ObjectParameter("FK_Measurement_Unit", fK_Measurement_Unit) :
                new ObjectParameter("FK_Measurement_Unit", typeof(byte));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Stock", name_of_StockParameter, fK_Measurement_UnitParameter, sumParameter, total_AmountParameter);
        }
    
        public virtual ObjectResult<Employers> SP_Select_Employers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employers>("SP_Select_Employers");
        }
    
        public virtual ObjectResult<Employers> SP_Select_Employers(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employers>("SP_Select_Employers", mergeOption);
        }
    
        public virtual ObjectResult<Ingredients> SP_Select_Ingredients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ingredients>("SP_Select_Ingredients");
        }
    
        public virtual ObjectResult<Ingredients> SP_Select_Ingredients(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ingredients>("SP_Select_Ingredients", mergeOption);
        }
    
        public virtual ObjectResult<Measurement_Unit> SP_Select_MeasurementUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measurement_Unit>("SP_Select_MeasurementUnit");
        }
    
        public virtual ObjectResult<Measurement_Unit> SP_Select_MeasurementUnit(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measurement_Unit>("SP_Select_MeasurementUnit", mergeOption);
        }
    
        public virtual ObjectResult<Finished_Production> SP_Select_Production()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Finished_Production>("SP_Select_Production");
        }
    
        public virtual ObjectResult<Finished_Production> SP_Select_Production(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Finished_Production>("SP_Select_Production", mergeOption);
        }
    
        public virtual ObjectResult<Ranks> SP_Select_Ranks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ranks>("SP_Select_Ranks");
        }
    
        public virtual ObjectResult<Ranks> SP_Select_Ranks(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ranks>("SP_Select_Ranks", mergeOption);
        }
    
        public virtual ObjectResult<Stock> SP_Select_Stock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Stock>("SP_Select_Stock");
        }
    
        public virtual ObjectResult<Stock> SP_Select_Stock(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Stock>("SP_Select_Stock", mergeOption);
        }
    
        public virtual int SP_Update_Employers(Nullable<int> iD_Employers, string name_of_Emp, Nullable<byte> fK_Rank, Nullable<double> payment, string adress, string phone_Number)
        {
            var iD_EmployersParameter = iD_Employers.HasValue ?
                new ObjectParameter("ID_Employers", iD_Employers) :
                new ObjectParameter("ID_Employers", typeof(int));
    
            var name_of_EmpParameter = name_of_Emp != null ?
                new ObjectParameter("Name_of_Emp", name_of_Emp) :
                new ObjectParameter("Name_of_Emp", typeof(string));
    
            var fK_RankParameter = fK_Rank.HasValue ?
                new ObjectParameter("FK_Rank", fK_Rank) :
                new ObjectParameter("FK_Rank", typeof(byte));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(double));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var phone_NumberParameter = phone_Number != null ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Employers", iD_EmployersParameter, name_of_EmpParameter, fK_RankParameter, paymentParameter, adressParameter, phone_NumberParameter);
        }
    
        public virtual int SP_Update_Ingredients(Nullable<int> iD_Ingredient, Nullable<int> fK_Production, Nullable<int> fK_Stock, Nullable<double> total_Amount)
        {
            var iD_IngredientParameter = iD_Ingredient.HasValue ?
                new ObjectParameter("ID_Ingredient", iD_Ingredient) :
                new ObjectParameter("ID_Ingredient", typeof(int));
    
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var fK_StockParameter = fK_Stock.HasValue ?
                new ObjectParameter("FK_Stock", fK_Stock) :
                new ObjectParameter("FK_Stock", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Ingredients", iD_IngredientParameter, fK_ProductionParameter, fK_StockParameter, total_AmountParameter);
        }
    
        public virtual int SP_Update_MeasurementUnit(Nullable<byte> iD_MerUn, string name_MerUn)
        {
            var iD_MerUnParameter = iD_MerUn.HasValue ?
                new ObjectParameter("ID_MerUn", iD_MerUn) :
                new ObjectParameter("ID_MerUn", typeof(byte));
    
            var name_MerUnParameter = name_MerUn != null ?
                new ObjectParameter("Name_MerUn", name_MerUn) :
                new ObjectParameter("Name_MerUn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_MeasurementUnit", iD_MerUnParameter, name_MerUnParameter);
        }
    
        public virtual int SP_Update_Production(Nullable<int> iD_FinPr, string name_FinPr, Nullable<byte> fK_Measurement_Unit, Nullable<double> sum, Nullable<double> total_Amount)
        {
            var iD_FinPrParameter = iD_FinPr.HasValue ?
                new ObjectParameter("ID_FinPr", iD_FinPr) :
                new ObjectParameter("ID_FinPr", typeof(int));
    
            var name_FinPrParameter = name_FinPr != null ?
                new ObjectParameter("Name_FinPr", name_FinPr) :
                new ObjectParameter("Name_FinPr", typeof(string));
    
            var fK_Measurement_UnitParameter = fK_Measurement_Unit.HasValue ?
                new ObjectParameter("FK_Measurement_Unit", fK_Measurement_Unit) :
                new ObjectParameter("FK_Measurement_Unit", typeof(byte));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Production", iD_FinPrParameter, name_FinPrParameter, fK_Measurement_UnitParameter, sumParameter, total_AmountParameter);
        }
    
        public virtual int SP_Update_Ranks(Nullable<int> iD_Rank, string rank_name)
        {
            var iD_RankParameter = iD_Rank.HasValue ?
                new ObjectParameter("ID_Rank", iD_Rank) :
                new ObjectParameter("ID_Rank", typeof(int));
    
            var rank_nameParameter = rank_name != null ?
                new ObjectParameter("Rank_name", rank_name) :
                new ObjectParameter("Rank_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Ranks", iD_RankParameter, rank_nameParameter);
        }
    
        public virtual int SP_Update_Stock(Nullable<int> iD_Stock, string name_of_Stock, Nullable<byte> fK_Measurement_Unit, Nullable<double> sum, Nullable<double> total_Amount)
        {
            var iD_StockParameter = iD_Stock.HasValue ?
                new ObjectParameter("ID_Stock", iD_Stock) :
                new ObjectParameter("ID_Stock", typeof(int));
    
            var name_of_StockParameter = name_of_Stock != null ?
                new ObjectParameter("Name_of_Stock", name_of_Stock) :
                new ObjectParameter("Name_of_Stock", typeof(string));
    
            var fK_Measurement_UnitParameter = fK_Measurement_Unit.HasValue ?
                new ObjectParameter("FK_Measurement_Unit", fK_Measurement_Unit) :
                new ObjectParameter("FK_Measurement_Unit", typeof(byte));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Stock", iD_StockParameter, name_of_StockParameter, fK_Measurement_UnitParameter, sumParameter, total_AmountParameter);
        }
    
        public virtual int Financial_SP_Delete_CreditInfo(Nullable<int> iD_Credit)
        {
            var iD_CreditParameter = iD_Credit.HasValue ?
                new ObjectParameter("ID_Credit", iD_Credit) :
                new ObjectParameter("ID_Credit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Delete_CreditInfo", iD_CreditParameter);
        }
    
        public virtual int Financial_SP_Delete_CreditPayment(Nullable<int> iD_Repayment)
        {
            var iD_RepaymentParameter = iD_Repayment.HasValue ?
                new ObjectParameter("ID_Repayment", iD_Repayment) :
                new ObjectParameter("ID_Repayment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Delete_CreditPayment", iD_RepaymentParameter);
        }
    
        public virtual int Financial_SP_Delete_Payment(Nullable<int> iD_PaymentLog)
        {
            var iD_PaymentLogParameter = iD_PaymentLog.HasValue ?
                new ObjectParameter("ID_PaymentLog", iD_PaymentLog) :
                new ObjectParameter("ID_PaymentLog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Delete_Payment", iD_PaymentLogParameter);
        }
    
        public virtual int Financial_SP_Insert_CreditInfo(string credit_Description, Nullable<double> sum_of_Credit, Nullable<System.DateTime> date_of_issue, Nullable<short> credit_Term, Nullable<byte> year_Percent, Nullable<double> fine_Sum)
        {
            var credit_DescriptionParameter = credit_Description != null ?
                new ObjectParameter("Credit_Description", credit_Description) :
                new ObjectParameter("Credit_Description", typeof(string));
    
            var sum_of_CreditParameter = sum_of_Credit.HasValue ?
                new ObjectParameter("Sum_of_Credit", sum_of_Credit) :
                new ObjectParameter("Sum_of_Credit", typeof(double));
    
            var date_of_issueParameter = date_of_issue.HasValue ?
                new ObjectParameter("Date_of_issue", date_of_issue) :
                new ObjectParameter("Date_of_issue", typeof(System.DateTime));
    
            var credit_TermParameter = credit_Term.HasValue ?
                new ObjectParameter("Credit_Term", credit_Term) :
                new ObjectParameter("Credit_Term", typeof(short));
    
            var year_PercentParameter = year_Percent.HasValue ?
                new ObjectParameter("Year_Percent", year_Percent) :
                new ObjectParameter("Year_Percent", typeof(byte));
    
            var fine_SumParameter = fine_Sum.HasValue ?
                new ObjectParameter("Fine_Sum", fine_Sum) :
                new ObjectParameter("Fine_Sum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Insert_CreditInfo", credit_DescriptionParameter, sum_of_CreditParameter, date_of_issueParameter, credit_TermParameter, year_PercentParameter, fine_SumParameter);
        }
    
        public virtual int Financial_SP_Insert_CreditPayment(Nullable<int> fK_Credit, Nullable<System.DateTime> date_of_Repayment)
        {
            var fK_CreditParameter = fK_Credit.HasValue ?
                new ObjectParameter("FK_Credit", fK_Credit) :
                new ObjectParameter("FK_Credit", typeof(int));
    
            var date_of_RepaymentParameter = date_of_Repayment.HasValue ?
                new ObjectParameter("Date_of_Repayment", date_of_Repayment) :
                new ObjectParameter("Date_of_Repayment", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Insert_CreditPayment", fK_CreditParameter, date_of_RepaymentParameter);
        }
    
        public virtual int Financial_SP_Insert_Payment(Nullable<int> fK_Employer, Nullable<System.DateTime> payment_Date, Nullable<double> additional_Pay)
        {
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            var payment_DateParameter = payment_Date.HasValue ?
                new ObjectParameter("Payment_Date", payment_Date) :
                new ObjectParameter("Payment_Date", typeof(System.DateTime));
    
            var additional_PayParameter = additional_Pay.HasValue ?
                new ObjectParameter("Additional_Pay", additional_Pay) :
                new ObjectParameter("Additional_Pay", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Insert_Payment", fK_EmployerParameter, payment_DateParameter, additional_PayParameter);
        }
    
        public virtual ObjectResult<Credit_Info> Financial_SP_Select_CreditInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Info>("Financial_SP_Select_CreditInfo");
        }
    
        public virtual ObjectResult<Credit_Info> Financial_SP_Select_CreditInfo(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Info>("Financial_SP_Select_CreditInfo", mergeOption);
        }
    
        public virtual ObjectResult<Credit_Repayment> Financial_SP_Select_CreditPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Repayment>("Financial_SP_Select_CreditPayment");
        }
    
        public virtual ObjectResult<Credit_Repayment> Financial_SP_Select_CreditPayment(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Repayment>("Financial_SP_Select_CreditPayment", mergeOption);
        }
    
        public virtual ObjectResult<Payment_Logs> Financial_SP_Select_Payment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_Logs>("Financial_SP_Select_Payment");
        }
    
        public virtual ObjectResult<Payment_Logs> Financial_SP_Select_Payment(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_Logs>("Financial_SP_Select_Payment", mergeOption);
        }
    
        public virtual int Financial_SP_Update_CreditInfo(Nullable<int> iD_Credit, string credit_Description, Nullable<double> sum_of_Credit, Nullable<System.DateTime> date_of_issue, Nullable<short> credit_Term, Nullable<byte> year_Percent, Nullable<double> fine_Sum, Nullable<double> sum_of_Month_Pay, Nullable<double> total_Sum_With_Year)
        {
            var iD_CreditParameter = iD_Credit.HasValue ?
                new ObjectParameter("ID_Credit", iD_Credit) :
                new ObjectParameter("ID_Credit", typeof(int));
    
            var credit_DescriptionParameter = credit_Description != null ?
                new ObjectParameter("Credit_Description", credit_Description) :
                new ObjectParameter("Credit_Description", typeof(string));
    
            var sum_of_CreditParameter = sum_of_Credit.HasValue ?
                new ObjectParameter("Sum_of_Credit", sum_of_Credit) :
                new ObjectParameter("Sum_of_Credit", typeof(double));
    
            var date_of_issueParameter = date_of_issue.HasValue ?
                new ObjectParameter("Date_of_issue", date_of_issue) :
                new ObjectParameter("Date_of_issue", typeof(System.DateTime));
    
            var credit_TermParameter = credit_Term.HasValue ?
                new ObjectParameter("Credit_Term", credit_Term) :
                new ObjectParameter("Credit_Term", typeof(short));
    
            var year_PercentParameter = year_Percent.HasValue ?
                new ObjectParameter("Year_Percent", year_Percent) :
                new ObjectParameter("Year_Percent", typeof(byte));
    
            var fine_SumParameter = fine_Sum.HasValue ?
                new ObjectParameter("Fine_Sum", fine_Sum) :
                new ObjectParameter("Fine_Sum", typeof(double));
    
            var sum_of_Month_PayParameter = sum_of_Month_Pay.HasValue ?
                new ObjectParameter("Sum_of_Month_Pay", sum_of_Month_Pay) :
                new ObjectParameter("Sum_of_Month_Pay", typeof(double));
    
            var total_Sum_With_YearParameter = total_Sum_With_Year.HasValue ?
                new ObjectParameter("Total_Sum_With_Year", total_Sum_With_Year) :
                new ObjectParameter("Total_Sum_With_Year", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Update_CreditInfo", iD_CreditParameter, credit_DescriptionParameter, sum_of_CreditParameter, date_of_issueParameter, credit_TermParameter, year_PercentParameter, fine_SumParameter, sum_of_Month_PayParameter, total_Sum_With_YearParameter);
        }
    
        public virtual int Financial_SP_Update_CreditPayment(Nullable<int> iD_Repayment, Nullable<int> fK_Credit, Nullable<System.DateTime> date_of_Repayment, Nullable<double> fair_Sum, Nullable<double> sum_of_Repayment)
        {
            var iD_RepaymentParameter = iD_Repayment.HasValue ?
                new ObjectParameter("ID_Repayment", iD_Repayment) :
                new ObjectParameter("ID_Repayment", typeof(int));
    
            var fK_CreditParameter = fK_Credit.HasValue ?
                new ObjectParameter("FK_Credit", fK_Credit) :
                new ObjectParameter("FK_Credit", typeof(int));
    
            var date_of_RepaymentParameter = date_of_Repayment.HasValue ?
                new ObjectParameter("Date_of_Repayment", date_of_Repayment) :
                new ObjectParameter("Date_of_Repayment", typeof(System.DateTime));
    
            var fair_SumParameter = fair_Sum.HasValue ?
                new ObjectParameter("Fair_Sum", fair_Sum) :
                new ObjectParameter("Fair_Sum", typeof(double));
    
            var sum_of_RepaymentParameter = sum_of_Repayment.HasValue ?
                new ObjectParameter("Sum_of_Repayment", sum_of_Repayment) :
                new ObjectParameter("Sum_of_Repayment", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Update_CreditPayment", iD_RepaymentParameter, fK_CreditParameter, date_of_RepaymentParameter, fair_SumParameter, sum_of_RepaymentParameter);
        }
    
        public virtual int Financial_SP_Update_Payment(Nullable<int> iD_PaymentLog, Nullable<int> fK_Employer, Nullable<int> amount_of_work, Nullable<double> sum_of_Bonus, Nullable<double> salary, Nullable<double> total_Payment, Nullable<int> buyStock_Amount, Nullable<int> manufacture_Amount, Nullable<int> sales_Amount, Nullable<System.DateTime> payment_Date, Nullable<double> additional_Pay)
        {
            var iD_PaymentLogParameter = iD_PaymentLog.HasValue ?
                new ObjectParameter("ID_PaymentLog", iD_PaymentLog) :
                new ObjectParameter("ID_PaymentLog", typeof(int));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            var amount_of_workParameter = amount_of_work.HasValue ?
                new ObjectParameter("Amount_of_work", amount_of_work) :
                new ObjectParameter("Amount_of_work", typeof(int));
    
            var sum_of_BonusParameter = sum_of_Bonus.HasValue ?
                new ObjectParameter("Sum_of_Bonus", sum_of_Bonus) :
                new ObjectParameter("Sum_of_Bonus", typeof(double));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var total_PaymentParameter = total_Payment.HasValue ?
                new ObjectParameter("Total_Payment", total_Payment) :
                new ObjectParameter("Total_Payment", typeof(double));
    
            var buyStock_AmountParameter = buyStock_Amount.HasValue ?
                new ObjectParameter("BuyStock_Amount", buyStock_Amount) :
                new ObjectParameter("BuyStock_Amount", typeof(int));
    
            var manufacture_AmountParameter = manufacture_Amount.HasValue ?
                new ObjectParameter("Manufacture_Amount", manufacture_Amount) :
                new ObjectParameter("Manufacture_Amount", typeof(int));
    
            var sales_AmountParameter = sales_Amount.HasValue ?
                new ObjectParameter("Sales_Amount", sales_Amount) :
                new ObjectParameter("Sales_Amount", typeof(int));
    
            var payment_DateParameter = payment_Date.HasValue ?
                new ObjectParameter("Payment_Date", payment_Date) :
                new ObjectParameter("Payment_Date", typeof(System.DateTime));
    
            var additional_PayParameter = additional_Pay.HasValue ?
                new ObjectParameter("Additional_Pay", additional_Pay) :
                new ObjectParameter("Additional_Pay", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_SP_Update_Payment", iD_PaymentLogParameter, fK_EmployerParameter, amount_of_workParameter, sum_of_BonusParameter, salaryParameter, total_PaymentParameter, buyStock_AmountParameter, manufacture_AmountParameter, sales_AmountParameter, payment_DateParameter, additional_PayParameter);
        }
    
        public virtual int Production_SP_Delete_Buystocks(Nullable<int> iD_BuyStock)
        {
            var iD_BuyStockParameter = iD_BuyStock.HasValue ?
                new ObjectParameter("ID_BuyStock", iD_BuyStock) :
                new ObjectParameter("ID_BuyStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Delete_Buystocks", iD_BuyStockParameter);
        }
    
        public virtual int Production_SP_Delete_Manufacture(Nullable<int> iD_Manufacture)
        {
            var iD_ManufactureParameter = iD_Manufacture.HasValue ?
                new ObjectParameter("ID_Manufacture", iD_Manufacture) :
                new ObjectParameter("ID_Manufacture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Delete_Manufacture", iD_ManufactureParameter);
        }
    
        public virtual int Production_SP_Delete_Sales_Of_Prod(Nullable<int> iD_SalesProd)
        {
            var iD_SalesProdParameter = iD_SalesProd.HasValue ?
                new ObjectParameter("ID_SalesProd", iD_SalesProd) :
                new ObjectParameter("ID_SalesProd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Delete_Sales_Of_Prod", iD_SalesProdParameter);
        }
    
        public virtual int Production_SP_Insert_Buystocks(Nullable<int> fK_Stock, Nullable<double> total_Amount, Nullable<double> sum, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var fK_StockParameter = fK_Stock.HasValue ?
                new ObjectParameter("FK_Stock", fK_Stock) :
                new ObjectParameter("FK_Stock", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Insert_Buystocks", fK_StockParameter, total_AmountParameter, sumParameter, dateParameter, fK_EmployerParameter);
        }
    
        public virtual int Production_SP_Insert_Manufacture(Nullable<int> fK_Production, Nullable<double> total_Amount, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Insert_Manufacture", fK_ProductionParameter, total_AmountParameter, dateParameter, fK_EmployerParameter);
        }
    
        public virtual int Production_SP_Insert_Sales_Of_Prod(Nullable<int> fK_Production, Nullable<double> total_Amount, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Insert_Sales_Of_Prod", fK_ProductionParameter, total_AmountParameter, dateParameter, fK_EmployerParameter);
        }
    
        public virtual ObjectResult<BuyStock> Production_SP_Select_Buystocks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuyStock>("Production_SP_Select_Buystocks");
        }
    
        public virtual ObjectResult<BuyStock> Production_SP_Select_Buystocks(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuyStock>("Production_SP_Select_Buystocks", mergeOption);
        }
    
        public virtual ObjectResult<Manufacture> Production_SP_Select_Manufacture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Manufacture>("Production_SP_Select_Manufacture");
        }
    
        public virtual ObjectResult<Manufacture> Production_SP_Select_Manufacture(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Manufacture>("Production_SP_Select_Manufacture", mergeOption);
        }
    
        public virtual ObjectResult<Sales_of_Prod> Production_SP_Select_Sales_Of_Prod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sales_of_Prod>("Production_SP_Select_Sales_Of_Prod");
        }
    
        public virtual ObjectResult<Sales_of_Prod> Production_SP_Select_Sales_Of_Prod(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sales_of_Prod>("Production_SP_Select_Sales_Of_Prod", mergeOption);
        }
    
        public virtual int Production_SP_Update_Buystocks(Nullable<int> iD_BuyStock, Nullable<int> fK_Stock, Nullable<double> total_Amount, Nullable<double> sum, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var iD_BuyStockParameter = iD_BuyStock.HasValue ?
                new ObjectParameter("ID_BuyStock", iD_BuyStock) :
                new ObjectParameter("ID_BuyStock", typeof(int));
    
            var fK_StockParameter = fK_Stock.HasValue ?
                new ObjectParameter("FK_Stock", fK_Stock) :
                new ObjectParameter("FK_Stock", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Update_Buystocks", iD_BuyStockParameter, fK_StockParameter, total_AmountParameter, sumParameter, dateParameter, fK_EmployerParameter);
        }
    
        public virtual int Production_SP_Update_Manufacture(Nullable<int> iD_Manufacture, Nullable<int> fK_Production, Nullable<double> total_Amount, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var iD_ManufactureParameter = iD_Manufacture.HasValue ?
                new ObjectParameter("ID_Manufacture", iD_Manufacture) :
                new ObjectParameter("ID_Manufacture", typeof(int));
    
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Update_Manufacture", iD_ManufactureParameter, fK_ProductionParameter, total_AmountParameter, dateParameter, fK_EmployerParameter);
        }
    
        public virtual int Production_SP_Update_Sales_Of_Prod(Nullable<int> iD_SalesProd, Nullable<int> fK_Production, Nullable<double> total_Amount, Nullable<System.DateTime> date, Nullable<int> fK_Employer)
        {
            var iD_SalesProdParameter = iD_SalesProd.HasValue ?
                new ObjectParameter("ID_SalesProd", iD_SalesProd) :
                new ObjectParameter("ID_SalesProd", typeof(int));
    
            var fK_ProductionParameter = fK_Production.HasValue ?
                new ObjectParameter("FK_Production", fK_Production) :
                new ObjectParameter("FK_Production", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fK_EmployerParameter = fK_Employer.HasValue ?
                new ObjectParameter("FK_Employer", fK_Employer) :
                new ObjectParameter("FK_Employer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_SP_Update_Sales_Of_Prod", iD_SalesProdParameter, fK_ProductionParameter, total_AmountParameter, dateParameter, fK_EmployerParameter);
        }
    }
}
